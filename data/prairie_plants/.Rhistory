library(dplyr)
# this is the raw data file but with the header and footer sections describing data reuse / provenance
data_cc = read.csv('e120_Plant aboveground biomass data no header footer.txt',sep = '\t')
names_planted = (data_cc %>% select(Achmi:Sornu) %>% names)
names_planted
length(names_planted)
write.csv(names_planted,'~/Downloads/np.csv')
19.87+36.19
56.06/4
library(ggplot2)
library(tidyr)
library(dplyr)
library(data.table)
library(wesanderson)
library(tibble)
library(ggpubr)
library(MuMIn)
library(caret)
library(visreg)
library(lme4)
library(vegan)
library(RColorBrewer)
library(MuMIn)
if (!file.exists('outputs_figures'))
{
dir.create('outputs_figures')
}
fn_outputs = dir('outputs_statistical',pattern="result.*\\.csv",full.names = TRUE)
df_all = rbindlist(lapply(1:length(fn_outputs), function(i)
{
df_this = read.csv(fn_outputs[i])
name_this = gsub("\\.csv","",gsub("results_","",basename(fn_outputs[i])))
df_this$name = name_this
return(df_this)
}))
nice_names = c(`annual_plant`="Annual plant",
`cedar_creek_plants`="Cedar Creek",
`fly_gut`="Fly gut",
`glv_simulated`="GLV simulated",
`human_gut`="Human gut",
`mouse_gut`="Mouse gut",
`sortie-nd_plants`="SORTIE-ND",
`soil_bacteria`="Soil bacteria"
)
# add NA removal counts
source('quantile_trim.R')
fns = c(`cedar_creek_plants`='data_cedar_creek/cedar_creek_2018.csv',
`sortie-nd_plants`='data_sortie/data_sortie.csv',
`human_gut`='data_glv/assemblages_H_12.csv',
`mouse_gut`='data_glv/assemblages_M_11.csv',
`glv_simulated`='data_glv/assemblages_glv_16.csv',
`annual_plant`='data_annual_plant/assemblages_annual_plant_18.csv',
`fly_gut`='data_fly/data_fly.csv',
`soil_bacteria`='data_friedman_gore/data_friedman_gore.csv')
row_counts = sapply(fns, function(x) {nrow(read.csv(x))})
row_counts_trimmed = sapply(fns, function(x) {
data = read.csv(x)
data = quantile_max_trim(data)
counts = data %>%
select(contains("star")) %>%
na.omit %>%
nrow
return(counts)
})
num_nas = row_counts - row_counts_trimmed
# add some additional info
df_all = df_all %>%
mutate(nice_name = nice_names[name]) %>%
mutate(empirical=name %in% c("cedar_creek_plants","fly_gut","soil_bacteria")) %>%
mutate(num_na = num_nas[name]) %>%
mutate(num_states = row_counts[name]) %>%
mutate(richness_scaled_mae_test = richness_mae_test / num_species_dataset) %>%
mutate(abundance_scaled_mae_test = abundance_mae_mean_test / abundance_q95_dataset)
# calculate stats
df_all_stats = df_all %>%
select(nice_name,
num_species_dataset,
num_replicates_dataset,
num_states,
num_na,
empirical) %>%
unique %>%
arrange(nice_name)
write.csv(df_all_stats,'outputs_figures/table_dataset_stats.csv',row.names=F)
library(ggplot2)
library(tidyr)
library(dplyr)
library(data.table)
library(wesanderson)
library(tibble)
library(ggpubr)
library(MuMIn)
library(caret)
library(visreg)
library(lme4)
library(vegan)
library(RColorBrewer)
library(MuMIn)
if (!file.exists('outputs_figures'))
{
dir.create('outputs_figures')
}
fn_outputs = dir('outputs_statistical',pattern="result.*\\.csv",full.names = TRUE)
library(dplyr)
# this is the raw data file but with the header and footer sections describing data reuse / provenance
data_cc = read.csv('e120_Plant aboveground biomass data no header footer.txt',sep = '\t')
names_planted = (data_cc %>% select(Achmi:Sornu) %>% names)
process_taxon <- function(strings)
{
sapply(strings, function(string)
{
parts = strsplit(string, " ")[[1]]
p1 = substr(parts[1],1,3)
p2 = substr(parts[2],1,2)
fullname = paste(p1,p2,sep="")
if (fullname %in% names_planted)
{
fullname = fullname
}
else
{
fullname = paste(fullname, string,sep="*")
}
return(fullname)
})
}
names_all = process_taxon(data_cc$Species %>% unique)
# make sure all names are unique
stopifnot(length(unique(names_all)) == length(names_all))
process_plot <- function(df)
{
inputs_planted = df[1,names_planted] # since all the planting within a plot should be constant
taxa_planted = names(inputs_planted)[which(inputs_planted==1)]
# get biomasses
taxa_found = df$Biomass..g.m2.
names(taxa_found) = df$Taxon
taxa_found_trimmed = taxa_found[names(taxa_found) %in% names_planted]
# sum up biomass by name (seems there are sometimes duplicates)
taxa_found_trimmed = tapply(unlist(taxa_found_trimmed), names(unlist(taxa_found_trimmed)), sum)
df_planted = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_planted) = names_planted
df_planted[1,taxa_planted] = 1
names(df_planted) = paste(names(df_planted), "action", sep=".")
df_outcome = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_outcome) = names_planted
df_outcome[1,names(taxa_found_trimmed)] = taxa_found_trimmed
names(df_outcome) = paste(names(df_outcome),"outcome",sep=".")
return(data.frame(df_planted, df_outcome))
}
process_data_by_year <- function(year_this)
{
# select most recent data
data_by_plot = data_cc %>%
filter(Year==year_this) %>%
group_by(Plot) %>%
select(Species, all_of(names_planted), Biomass..g.m2.) %>%
mutate(Taxon = process_taxon(Species)) %>%
group_split
data_processed = do.call("rbind",lapply(data_by_plot, process_plot,rewrite.names = TRUE))
return(data_processed)
}
data_2018 = process_data_by_year(2018)
library(dplyr)
# this is the raw data file but with the header and footer sections describing data reuse / provenance
data_cc = read.csv('e120_Plant aboveground biomass data no header footer.txt',sep = '\t')
names_planted = (data_cc %>% select(Achmi:Sornu) %>% names)
process_taxon <- function(strings)
{
sapply(strings, function(string)
{
parts = strsplit(string, " ")[[1]]
p1 = substr(parts[1],1,3)
p2 = substr(parts[2],1,2)
fullname = paste(p1,p2,sep="")
if (fullname %in% names_planted)
{
fullname = fullname
}
else
{
fullname = paste(fullname, string,sep="*")
}
return(fullname)
})
}
names_all = process_taxon(data_cc$Species %>% unique)
# make sure all names are unique
stopifnot(length(unique(names_all)) == length(names_all))
process_plot <- function(df)
{
inputs_planted = df[1,names_planted] # since all the planting within a plot should be constant
taxa_planted = names(inputs_planted)[which(inputs_planted==1)]
# get biomasses
taxa_found = df$Biomass..g.m2.
names(taxa_found) = df$Taxon
taxa_found_trimmed = taxa_found[names(taxa_found) %in% names_planted]
# sum up biomass by name (seems there are sometimes duplicates)
taxa_found_trimmed = tapply(unlist(taxa_found_trimmed), names(unlist(taxa_found_trimmed)), sum)
df_planted = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_planted) = names_planted
df_planted[1,taxa_planted] = 1
names(df_planted) = paste(names(df_planted), "action", sep=".")
df_outcome = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_outcome) = names_planted
df_outcome[1,names(taxa_found_trimmed)] = taxa_found_trimmed
names(df_outcome) = paste(names(df_outcome),"outcome",sep=".")
return(data.frame(df_planted, df_outcome))
}
process_data_by_year <- function(year_this)
{
# select most recent data
data_by_plot = data_cc %>%
filter(Year==year_this) %>%
group_by(Plot) %>%
select(Species, all_of(names_planted), Biomass..g.m2.) %>%
mutate(Taxon = process_taxon(Species)) %>%
group_split
data_processed = do.call("rbind",lapply(data_by_plot, process_plot))
return(data_processed)
}
data_2018 = process_data_by_year(2018)
data_2018
View(data_2018)
data_2017 = process_data_by_year(2017)
data_2016 = process_data_by_year(2016)
# check row ordering is constant
diffs_2018_2017 = (data_2018 %>% select(contains("action")) - data_2017 %>% select(contains("action")))
diffs_2017_2016 = (data_2017 %>% select(contains("action")) - data_2016 %>% select(contains("action")))
stopifnot(all(as.numeric(as.matrix(diffs_2018_2017)) == 0))
stopifnot(all(as.numeric(as.matrix(diffs_2017_2016)) == 0))
# look for temporal variation in each species biomass over time
outcome_2018 = as.matrix(data_2018 %>% select(contains("outcome")))
outcome_2017 = as.matrix(data_2017 %>% select(contains("outcome")))
outcome_2016 = as.matrix(data_2016 %>% select(contains("outcome")))
outcome = simplify2array(list(star_2016, star_2017, star_2018))
outcome = simplify2array(list(outcome_2016, outcome_2017, outcome_2018))
outcome = simplify2array(list(outcome_2016, outcome_2017, outcome_2018))
# calculate elementwise coefficient of variation over time
cv.outcome = apply(star, c(1,2), function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)] = 0; return(cv) } )
# calculate elementwise coefficient of variation over time
cv.outcome = apply(outcome, c(1,2), function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)] = 0; return(cv) } )
cv.outcome.mean = apply(cv.outcome, 1, mean)
cv.outcome.mean
# keep 2018 data only, CVs are relatively small
data_final = data_2018 %>%
mutate(environment.initial = 0) %>%
select(contains("action"),contains("initial"),contains("outcome"))
View(data_final)
write.csv(data_final, file='data_cedar_creek.csv',row.names = FALSE)
write.csv(data_final, file='data_cedar_creek.csv',row.names = FALSE)
library(dplyr)
# this is the raw data file but with the header and footer sections describing data reuse / provenance
data_cc = read.csv('e120_Plant aboveground biomass data no header footer.txt',sep = '\t')
names_planted = (data_cc %>% select(Achmi:Sornu) %>% names)
process_taxon <- function(strings)
{
sapply(strings, function(string)
{
parts = strsplit(string, " ")[[1]]
p1 = substr(parts[1],1,3)
p2 = substr(parts[2],1,2)
fullname = paste(p1,p2,sep="")
if (fullname %in% names_planted)
{
fullname = fullname
}
else
{
fullname = paste(fullname, string,sep="*")
}
return(fullname)
})
}
names_all = process_taxon(data_cc$Species %>% unique)
# make sure all names are unique
stopifnot(length(unique(names_all)) == length(names_all))
process_plot <- function(df)
{
inputs_planted = df[1,names_planted] # since all the planting within a plot should be constant
taxa_planted = names(inputs_planted)[which(inputs_planted==1)]
# get biomasses
taxa_found = df$Biomass..g.m2.
names(taxa_found) = df$Taxon
taxa_found_trimmed = taxa_found[names(taxa_found) %in% names_planted]
# sum up biomass by name (seems there are sometimes duplicates)
taxa_found_trimmed = tapply(unlist(taxa_found_trimmed), names(unlist(taxa_found_trimmed)), sum)
df_planted = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_planted) = names_planted
df_planted[1,taxa_planted] = 1
names(df_planted) = paste(names(df_planted), "action", sep=".")
df_outcome = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_outcome) = names_planted
df_outcome[1,names(taxa_found_trimmed)] = taxa_found_trimmed
names(df_outcome) = paste(names(df_outcome),"outcome",sep=".")
return(data.frame(df_planted, df_outcome))
}
process_data_by_year <- function(year_this)
{
# select most recent data
data_by_plot = data_cc %>%
filter(Year==year_this) %>%
group_by(Plot) %>%
select(Species, all_of(names_planted), Biomass..g.m2.) %>%
mutate(Taxon = process_taxon(Species)) %>%
group_split
data_processed = do.call("rbind",lapply(data_by_plot, process_plot))
return(data_processed)
}
data_2018 = process_data_by_year(2018)
data_2017 = process_data_by_year(2017)
data_2016 = process_data_by_year(2016)
# check row ordering is constant
diffs_2018_2017 = (data_2018 %>% select(contains("action")) - data_2017 %>% select(contains("action")))
diffs_2017_2016 = (data_2017 %>% select(contains("action")) - data_2016 %>% select(contains("action")))
stopifnot(all(as.numeric(as.matrix(diffs_2018_2017)) == 0))
stopifnot(all(as.numeric(as.matrix(diffs_2017_2016)) == 0))
# look for temporal variation in each species biomass over time
outcome_2018 = as.matrix(data_2018 %>% select(contains("outcome")))
outcome_2017 = as.matrix(data_2017 %>% select(contains("outcome")))
outcome_2016 = as.matrix(data_2016 %>% select(contains("outcome")))
outcome = simplify2array(list(outcome_2016, outcome_2017, outcome_2018))
# calculate elementwise coefficient of variation over time
cv.outcome = apply(outcome, c(1,2), function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)] = 0; return(cv) } )
cv.outcome.mean = apply(cv.outcome, 1, mean)
# keep 2018 data only, CVs are relatively small
data_final = data_2018 %>%
mutate(environment.initial = 0) %>%
select(contains("action"),contains("initial"),contains("outcome"))
#data_final$stable = (cv.star.mean < 0.5)
write.csv(data_final, file='data_prairie_plants.csv',row.names = FALSE)
