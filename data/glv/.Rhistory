{
##########
LVmod = function(t, N, params) {
r = params$r
A = params$A
dNdt = N * (r + A %*% N)
list(dNdt)
}
time = seq(from=0, to=1000, by=0.1)
x_0 = rep(1, length(params$r))
simulation = ode(
y = x_0,
times = time,
func = LVmod,
parms = params
) %>%
as.data.frame %>%
as_tibble
print(str(simulation))
x_star =
simulation %>%
filter(time == max(time)) %>%
select(-time) %>%
as.numeric()
names(x_star) = paste(names(params$r),"star",sep=".")
}
else
{
x_star = NULL
}
print(x_star)
print(str(x_star))
return(x_star)
}
determine_feasibility <- function(params, x_star)
{
if (length(params$r) > 0)
{
feasibility = all(x_star > 0)
}
else
{
feasibility = TRUE
}
return(feasibility)
}
determine_stability <- function(params, x_star)
{
if (length(params$r) > 0)
{
Jacobian = diag(x=x_star,nrow=nrow(params$A),ncol=ncol(params$A)) * params$A
lambda = eigen(Jacobian)$values
stability = all(Re(lambda) < 0)
}
else
{
stability = TRUE
}
return(stability)
}
fill_in_assemblages <- function(assemblages, params)
{
n = log2(nrow(assemblages))
for (i in 1:nrow(assemblages)) # skip the no-species scenario
{
message(i/nrow(assemblages))
params_this_row = assign_params(assemblage = assemblages[i,1:n], params = params)
x_star = determine_fixed_point(params_this_row)
assemblages[i,"stable"] = determine_stability(params_this_row, x_star=x_star)
assemblages[i,"feasible"] = determine_feasibility(params_this_row, x_star=x_star)
if (!is.null(x_star))
{
assemblages[i,names(x_star)] = x_star
}
# set abundance of 0.01 as the minimum threshold to 'count' for richness
assemblages[i,"richness"] = sum(x_star > 0.01)
}
return(assemblages)
}
set.seed(1) # replicability
nsp_glv_16 <- 4#16
warning('change # of species back!')
params_glv_16 = generate_params(n = nsp_glv_16, A.norm.mean = -0.2, r.norm.mean = 1.5)
assemblages_glv_16 = fill_in_assemblages(params = params_glv_16, assemblages = generate_assemblages(n = nsp_glv_16))
assemblages_glv_16
?melt
??melt
library(reshape2)
generate_assemblages <- function(n, labels=letters)
{
df = expand.grid(replicate(n, 0:1, simplify = FALSE))
names(df) = labels[1:n]
x_star = as.data.frame(matrix(data=0,nrow=nrow(df),ncol=ncol(df)))
names(x_star) = paste(names(df),"star",sep=".")
df_final = data.frame(df,
stable=NA,
feasible=NA,
richness=NA,
x_star)
return(df_final)
}
generate_params <- function(n, labels=letters, A.diag=-1,
distribution.A='norm',
A.norm.mean=-0.2, A.norm.sd=0.2,
A.lnorm_neg.meanlog=log(0.25), A.lnorm_neg.sdlog=log(1.5),
A.lnorm_pos.meanlog=log(0.25), A.lnorm_pos.sdlog=log(1.5),
distribution.r='norm',
r.norm.mean=1, r.norm.sd=0.5,
r.lnorm_pos.meanlog=log(1),
r.lnorm_pos.sdlog=log(2))
{
# interaction matrix
A = matrix(data=NA,nrow=n,ncol=n)
dimnames(A) = list(labels[1:n],labels[1:n])
# intrinsic growth rate vector
r = rep(NA, n)
names(r) = labels[1:n]
# fill A
if (distribution.A=='norm')
{
A[] = rnorm(n=n*n,mean=A.norm.mean,sd=A.norm.sd)
}
else if (distribution.A=='lnorm_neg')
{
A[] = -1*rlnorm(n=n*n,meanlog=A.lnorm_neg.meanlog,sdlog=A.lnorm_neg.sdlog)
}
else if (distribution.A=='lnorm_pos')
{
A[] = rlnorm(n=n*n,meanlog=A.lnorm_pos.meanlog,sdlog=A.lnorm_pos.sdlog)
}
else
{
stop('distribution not found')
}
# fill r
if (distribution.r=='norm')
{
r[] = rnorm(n=n,mean=r.norm.mean,sd=r.norm.sd)
}
else if (distribution.r=='lnorm_pos')
{
r[] = rlnorm(n=n,meanlog=r.lnorm_pos.meanlog,sdlog=r.lnorm_pos.sdlog)
}
else
{
stop('distribution not found')
}
# set diagonal for A if requested
if (!is.null(A.diag))
{
diag(A) <- rep(A.diag,n)
}
# return combo
return(list(A=A,r=r))
}
assign_params <- function(assemblage, params)
{
stopifnot(nrow(assemblage)==1)
# find species that are present
species_indices_present = which(as.numeric(assemblage)==1)
# pick subset of parameters (assuming that the parameters don't change when subsetting)
A_this = params$A[species_indices_present, species_indices_present, drop=FALSE]
r_this = params$r[species_indices_present]
return(list(A=A_this,r=r_this))
}
determine_fixed_point <- function(params)
{
if (length(params$r) > 0)
{
##########
LVmod = function(t, N, params) {
r = params$r
A = params$A
dNdt = N * (r + A %*% N)
list(dNdt)
}
time = seq(from=0, to=1000, by=0.1)
x_0 = rep(1, length(params$r))
simulation = ode(
y = x_0,
times = time,
func = LVmod,
parms = params
) %>%
as.data.frame %>%
as_tibble
ggplot(melt(simulation,id.vars='time'),aes(x=time,y=value,color=variable)) +
geom_line()
x_star =
simulation %>%
filter(time == max(time)) %>%
select(-time) %>%
as.numeric()
names(x_star) = paste(names(params$r),"star",sep=".")
}
else
{
x_star = NULL
}
print(x_star)
print(str(x_star))
return(x_star)
}
determine_feasibility <- function(params, x_star)
{
if (length(params$r) > 0)
{
feasibility = all(x_star > 0)
}
else
{
feasibility = TRUE
}
return(feasibility)
}
determine_stability <- function(params, x_star)
{
if (length(params$r) > 0)
{
Jacobian = diag(x=x_star,nrow=nrow(params$A),ncol=ncol(params$A)) * params$A
lambda = eigen(Jacobian)$values
stability = all(Re(lambda) < 0)
}
else
{
stability = TRUE
}
return(stability)
}
fill_in_assemblages <- function(assemblages, params)
{
n = log2(nrow(assemblages))
for (i in 1:nrow(assemblages)) # skip the no-species scenario
{
message(i/nrow(assemblages))
params_this_row = assign_params(assemblage = assemblages[i,1:n], params = params)
x_star = determine_fixed_point(params_this_row)
assemblages[i,"stable"] = determine_stability(params_this_row, x_star=x_star)
assemblages[i,"feasible"] = determine_feasibility(params_this_row, x_star=x_star)
if (!is.null(x_star))
{
assemblages[i,names(x_star)] = x_star
}
# set abundance of 0.01 as the minimum threshold to 'count' for richness
assemblages[i,"richness"] = sum(x_star > 0.01)
}
return(assemblages)
}
set.seed(1) # replicability
nsp_glv_16 <- 4#16
warning('change # of species back!')
params_glv_16 = generate_params(n = nsp_glv_16, A.norm.mean = -0.2, r.norm.mean = 1.5)
assemblages_glv_16 = fill_in_assemblages(params = params_glv_16, assemblages = generate_assemblages(n = nsp_glv_16))
write.csv(assemblages_glv_16,file='assemblages_glv_16.csv',row.names=FALSE)
# check counts
assemblages_glv_16 %>% select(richness, stable) %>% table
library(dplyr)
library(tidyr)
library(deSolve)
library(ggplot2)
library(reshape2)
generate_assemblages <- function(n, labels=letters)
{
df = expand.grid(replicate(n, 0:1, simplify = FALSE))
names(df) = labels[1:n]
x_star = as.data.frame(matrix(data=0,nrow=nrow(df),ncol=ncol(df)))
names(x_star) = paste(names(df),"star",sep=".")
df_final = data.frame(df,
stable=NA,
feasible=NA,
richness=NA,
x_star)
return(df_final)
}
generate_params <- function(n, labels=letters, A.diag=-1,
distribution.A='norm',
A.norm.mean=-0.2, A.norm.sd=0.2,
A.lnorm_neg.meanlog=log(0.25), A.lnorm_neg.sdlog=log(1.5),
A.lnorm_pos.meanlog=log(0.25), A.lnorm_pos.sdlog=log(1.5),
distribution.r='norm',
r.norm.mean=1, r.norm.sd=0.5,
r.lnorm_pos.meanlog=log(1),
r.lnorm_pos.sdlog=log(2))
{
# interaction matrix
A = matrix(data=NA,nrow=n,ncol=n)
dimnames(A) = list(labels[1:n],labels[1:n])
# intrinsic growth rate vector
r = rep(NA, n)
names(r) = labels[1:n]
# fill A
if (distribution.A=='norm')
{
A[] = rnorm(n=n*n,mean=A.norm.mean,sd=A.norm.sd)
}
else if (distribution.A=='lnorm_neg')
{
A[] = -1*rlnorm(n=n*n,meanlog=A.lnorm_neg.meanlog,sdlog=A.lnorm_neg.sdlog)
}
else if (distribution.A=='lnorm_pos')
{
A[] = rlnorm(n=n*n,meanlog=A.lnorm_pos.meanlog,sdlog=A.lnorm_pos.sdlog)
}
else
{
stop('distribution not found')
}
# fill r
if (distribution.r=='norm')
{
r[] = rnorm(n=n,mean=r.norm.mean,sd=r.norm.sd)
}
else if (distribution.r=='lnorm_pos')
{
r[] = rlnorm(n=n,meanlog=r.lnorm_pos.meanlog,sdlog=r.lnorm_pos.sdlog)
}
else
{
stop('distribution not found')
}
# set diagonal for A if requested
if (!is.null(A.diag))
{
diag(A) <- rep(A.diag,n)
}
# return combo
return(list(A=A,r=r))
}
assign_params <- function(assemblage, params)
{
stopifnot(nrow(assemblage)==1)
# find species that are present
species_indices_present = which(as.numeric(assemblage)==1)
# pick subset of parameters (assuming that the parameters don't change when subsetting)
A_this = params$A[species_indices_present, species_indices_present, drop=FALSE]
r_this = params$r[species_indices_present]
return(list(A=A_this,r=r_this))
}
determine_fixed_point <- function(params)
{
if (length(params$r) > 0)
{
##########
LVmod = function(t, N, params) {
r = params$r
A = params$A
dNdt = N * (r + A %*% N)
list(dNdt)
}
time = seq(from=0, to=1000, by=0.1)
x_0 = rep(1, length(params$r))
simulation = ode(
y = x_0,
times = time,
func = LVmod,
parms = params
) %>%
as.data.frame %>%
as_tibble
ggplot(melt(simulation,id.vars='time'),aes(x=time,y=value,color=variable)) +
geom_line()
x_star =
simulation %>%
filter(time == max(time)) %>%
select(-time) %>%
as.numeric()
names(x_star) = paste(names(params$r),"star",sep=".")
}
else
{
x_star = NULL
}
print(x_star)
print(str(x_star))
return(x_star)
}
determine_feasibility <- function(params, x_star)
{
if (length(params$r) > 0)
{
feasibility = all(x_star > 0)
}
else
{
feasibility = TRUE
}
return(feasibility)
}
determine_stability <- function(params, x_star)
{
if (length(params$r) > 0)
{
Jacobian = diag(x=x_star,nrow=nrow(params$A),ncol=ncol(params$A)) * params$A
lambda = eigen(Jacobian)$values
stability = all(Re(lambda) < 0)
}
else
{
stability = TRUE
}
return(stability)
}
fill_in_assemblages <- function(assemblages, params)
{
n = log2(nrow(assemblages))
for (i in 1:nrow(assemblages)) # skip the no-species scenario
{
message(i/nrow(assemblages))
params_this_row = assign_params(assemblage = assemblages[i,1:n], params = params)
x_star = determine_fixed_point(params_this_row)
assemblages[i,"stable"] = determine_stability(params_this_row, x_star=x_star)
assemblages[i,"feasible"] = determine_feasibility(params_this_row, x_star=x_star)
if (!is.null(x_star))
{
assemblages[i,names(x_star)] = x_star
}
# set abundance of 0.01 as the minimum threshold to 'count' for richness
assemblages[i,"richness"] = sum(x_star > 0.01)
}
return(assemblages)
}
set.seed(1) # replicability
nsp_glv_16 <- 4#16
warning('change # of species back!')
params_glv_16 = generate_params(n = nsp_glv_16, A.norm.mean = -0.2, r.norm.mean = 1.5)
assemblages_glv_16 = fill_in_assemblages(params = params_glv_16, assemblages = generate_assemblages(n = nsp_glv_16))
write.csv(assemblages_glv_16,file='assemblages_glv_16.csv',row.names=FALSE)
# check counts
assemblages_glv_16 %>% select(richness, stable) %>% table
determine_fixed_point <- function(params)
{
if (length(params$r) > 0)
{
##########
LVmod = function(t, N, params) {
r = params$r
A = params$A
dNdt = N * (r + A %*% N)
list(dNdt)
}
time = seq(from=0, to=1000, by=0.1)
x_0 = rep(1, length(params$r))
simulation = ode(
y = x_0,
times = time,
func = LVmod,
parms = params
) %>%
as.data.frame %>%
as_tibble
sim_to_plot = melt(simulation,id.vars='time')
print(str(sim_to_plot))
ggplot(sim_to_plot,aes(x=time,y=value,color=variable)) +
geom_line()
x_star =
simulation %>%
filter(time == max(time)) %>%
select(-time) %>%
as.numeric()
names(x_star) = paste(names(params$r),"star",sep=".")
}
else
{
x_star = NULL
}
print(x_star)
print(str(x_star))
return(x_star)
}
assemblages_glv_16 = fill_in_assemblages(params = params_glv_16, assemblages = generate_assemblages(n = nsp_glv_16))
determine_fixed_point <- function(params)
{
if (length(params$r) > 0)
{
##########
LVmod = function(t, N, params) {
r = params$r
A = params$A
dNdt = N * (r + A %*% N)
list(dNdt)
}
time = seq(from=0, to=1000, by=0.1)
x_0 = rep(1, length(params$r))
simulation = ode(
y = x_0,
times = time,
func = LVmod,
parms = params
) %>%
as.data.frame %>%
as_tibble
sim_to_plot = melt(simulation,id.vars='time')
print(str(sim_to_plot))
g = ggplot(sim_to_plot,aes(x=time,y=value,color=variable)) +
geom_line()
ggsave(g,file=sprintf('~/Downloads/test_%f.png',runif(1)))
x_star =
simulation %>%
filter(time == max(time)) %>%
select(-time) %>%
as.numeric()
names(x_star) = paste(names(params$r),"star",sep=".")
}
else
{
x_star = NULL
}
print(x_star)
print(str(x_star))
return(x_star)
}
assemblages_glv_16 = fill_in_assemblages(params = params_glv_16, assemblages = generate_assemblages(n = nsp_glv_16))
