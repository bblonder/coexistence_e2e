df_planted[1,taxa_planted] = 1
print(df_planted)
df_out = data.frame(matrix(nrow=1,ncol=2*length(names_planted),data=NA))
names(df_out) = c(names_planted, paste(names_planted,"star",sep="."))
return(df_out)
}
process_plot(data_by_plot[[12]])
process_plot <- function(df)
{
inputs_planted = df[1,names_planted] # since all the planting within a plot should be constant
taxa_planted = names(inputs_planted)[which(inputs_planted==1)]
#print(taxa_planted)
taxa_found = df$Biomass..g.m2.
names(taxa_found) = df$Taxon
#print(taxa_found)
taxa_found_trimmed = taxa_found[names(taxa_found) %in% names_planted]
#print(taxa_found_trimmed)
df_planted = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_planted) = names_planted
df_planted[1,taxa_planted] = 1
print(df_planted)
df_outcome = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_outcome) = names_planted
df_outcome[1,names(taxa_found_trimmed)] = taxa_found_trimmed
print(df_outcome)
}
process_plot(data_by_plot[[12]])
process_plot <- function(df)
{
inputs_planted = df[1,names_planted] # since all the planting within a plot should be constant
taxa_planted = names(inputs_planted)[which(inputs_planted==1)]
#print(taxa_planted)
taxa_found = df$Biomass..g.m2.
names(taxa_found) = df$Taxon
#print(taxa_found)
taxa_found_trimmed = taxa_found[names(taxa_found) %in% names_planted]
#print(taxa_found_trimmed)
df_planted = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_planted) = names_planted
df_planted[1,taxa_planted] = 1
print(df_planted)
df_outcome = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_outcome) = names_planted
df_outcome[1,names(taxa_found_trimmed)] = taxa_found_trimmed
names(df_outcome) = paste(names(df_outcome),"star",sep=".")
print(df_outcome)
}
process_plot(data_by_plot[[12]])
process_plot <- function(df, rewrite.names=FALSE)
{
inputs_planted = df[1,names_planted] # since all the planting within a plot should be constant
taxa_planted = names(inputs_planted)[which(inputs_planted==1)]
#print(taxa_planted)
taxa_found = df$Biomass..g.m2.
names(taxa_found) = df$Taxon
#print(taxa_found)
taxa_found_trimmed = taxa_found[names(taxa_found) %in% names_planted]
#print(taxa_found_trimmed)
df_planted = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_planted) = names_planted
df_planted[1,taxa_planted] = 1
if (rewrite.names==TRUE)
{
names(df_planted) = letters[1:ncol(df_planted)]
}
df_outcome = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_outcome) = names_planted
df_outcome[1,names(taxa_found_trimmed)] = taxa_found_trimmed
if (rewrite.names==TRUE)
{
names(df_outcome) = letters[1:ncol(df_outcome)]
}
names(df_outcome) = paste(names(df_outcome),"star",sep=".")
stable = NA
feasible = TRUE
richness = NA
return(data.frame(df_planted, stable, feasible, richness, df_outcome))
}
process_plot(data_by_plot[[12]])
process_plot(data_by_plot[[12]],rewrite.names = TRUE)
lapply(data_by_plot, process_plot,rewrite.names = TRUE)
process_plot(data_by_plot[[1]],rewrite.names = TRUE)
process_plot(data_by_plot[[2]],rewrite.names = TRUE)
process_plot(data_by_plot[[3]],rewrite.names = TRUE)
process_plot(data_by_plot[[4]],rewrite.names = TRUE)
for (i in 1:length(data_by_plot))
{
print(i)
process_plot(data_by_plot[[i]],rewrite.names = TRUE)
}
process_plot(data_by_plot[[146]],rewrite.names = TRUE)
process_plot(data_by_plot[[145]],rewrite.names = TRUE)
data_by_plot[[146]]
data_by_plot[[146]] %>% View
process_plot <- function(df, rewrite.names=FALSE)
{
inputs_planted = df[1,names_planted] # since all the planting within a plot should be constant
taxa_planted = names(inputs_planted)[which(inputs_planted==1)]
#print(taxa_planted)
taxa_found = df$Biomass..g.m2.
names(taxa_found) = df$Taxon
#print(taxa_found)
taxa_found_trimmed = taxa_found[names(taxa_found) %in% names_planted]
if(any(duplicated(taxa_found_trimmed)))
{
print(df)
}
#print(taxa_found_trimmed)
df_planted = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_planted) = names_planted
df_planted[1,taxa_planted] = 1
if (rewrite.names==TRUE)
{
names(df_planted) = letters[1:ncol(df_planted)]
}
df_outcome = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_outcome) = names_planted
df_outcome[1,names(taxa_found_trimmed)] = taxa_found_trimmed
if (rewrite.names==TRUE)
{
names(df_outcome) = letters[1:ncol(df_outcome)]
}
names(df_outcome) = paste(names(df_outcome),"star",sep=".")
stable = NA
feasible = TRUE
richness = NA
return(data.frame(df_planted, stable, feasible, richness, df_outcome))
}
data_by_plot[[146]] %>% View
process_plot(data_by_plot[[145]],rewrite.names = TRUE)
process_plot(data_by_plot[[146]],rewrite.names = TRUE)
process_plot <- function(df, rewrite.names=FALSE)
{
inputs_planted = df[1,names_planted] # since all the planting within a plot should be constant
taxa_planted = names(inputs_planted)[which(inputs_planted==1)]
#print(taxa_planted)
taxa_found = df$Biomass..g.m2.
names(taxa_found) = df$Taxon
#print(taxa_found)
taxa_found_trimmed = taxa_found[names(taxa_found) %in% names_planted]
if(any(duplicated(names(taxa_found_trimmed))))
{
print(df)
}
#print(taxa_found_trimmed)
df_planted = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_planted) = names_planted
df_planted[1,taxa_planted] = 1
if (rewrite.names==TRUE)
{
names(df_planted) = letters[1:ncol(df_planted)]
}
df_outcome = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_outcome) = names_planted
df_outcome[1,names(taxa_found_trimmed)] = taxa_found_trimmed
if (rewrite.names==TRUE)
{
names(df_outcome) = letters[1:ncol(df_outcome)]
}
names(df_outcome) = paste(names(df_outcome),"star",sep=".")
stable = NA
feasible = TRUE
richness = NA
return(data.frame(df_planted, stable, feasible, richness, df_outcome))
}
process_plot(data_by_plot[[146]],rewrite.names = TRUE)
process_plot <- function(df, rewrite.names=FALSE)
{
inputs_planted = df[1,names_planted] # since all the planting within a plot should be constant
taxa_planted = names(inputs_planted)[which(inputs_planted==1)]
#print(taxa_planted)
taxa_found = df$Biomass..g.m2.
names(taxa_found) = df$Taxon
#print(taxa_found)
taxa_found_trimmed = taxa_found[names(taxa_found) %in% names_planted]
print(taxa_found_trimmed)
df_planted = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_planted) = names_planted
df_planted[1,taxa_planted] = 1
if (rewrite.names==TRUE)
{
names(df_planted) = letters[1:ncol(df_planted)]
}
df_outcome = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_outcome) = names_planted
df_outcome[1,names(taxa_found_trimmed)] = taxa_found_trimmed
if (rewrite.names==TRUE)
{
names(df_outcome) = letters[1:ncol(df_outcome)]
}
names(df_outcome) = paste(names(df_outcome),"star",sep=".")
stable = NA
feasible = TRUE
richness = NA
return(data.frame(df_planted, stable, feasible, richness, df_outcome))
}
process_plot(data_by_plot[[146]],rewrite.names = TRUE)
process_plot <- function(df, rewrite.names=FALSE)
{
inputs_planted = df[1,names_planted] # since all the planting within a plot should be constant
taxa_planted = names(inputs_planted)[which(inputs_planted==1)]
#print(taxa_planted)
taxa_found = df$Biomass..g.m2.
names(taxa_found) = df$Taxon
#print(taxa_found)
taxa_found_trimmed = taxa_found[names(taxa_found) %in% names_planted]
print(taxa_found_trimmed)
print(tapply(unlist(taxa_found_trimmed), names(unlist(taxa_found_trimmed)), sum))
df_planted = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_planted) = names_planted
df_planted[1,taxa_planted] = 1
if (rewrite.names==TRUE)
{
names(df_planted) = letters[1:ncol(df_planted)]
}
df_outcome = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_outcome) = names_planted
df_outcome[1,names(taxa_found_trimmed)] = taxa_found_trimmed
if (rewrite.names==TRUE)
{
names(df_outcome) = letters[1:ncol(df_outcome)]
}
names(df_outcome) = paste(names(df_outcome),"star",sep=".")
stable = NA
feasible = TRUE
richness = NA
return(data.frame(df_planted, stable, feasible, richness, df_outcome))
}
process_plot(data_by_plot[[146]],rewrite.names = TRUE)
process_plot <- function(df, rewrite.names=FALSE)
{
inputs_planted = df[1,names_planted] # since all the planting within a plot should be constant
taxa_planted = names(inputs_planted)[which(inputs_planted==1)]
# get biomasses
taxa_found = df$Biomass..g.m2.
names(taxa_found) = df$Taxon
taxa_found_trimmed = taxa_found[names(taxa_found) %in% names_planted]
# sum up biomass by name (seems there are sometimes duplicates)
taxa_found_trimmed = tapply(unlist(taxa_found_trimmed), names(unlist(taxa_found_trimmed)), sum)
df_planted = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_planted) = names_planted
df_planted[1,taxa_planted] = 1
if (rewrite.names==TRUE)
{
names(df_planted) = letters[1:ncol(df_planted)]
}
df_outcome = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_outcome) = names_planted
df_outcome[1,names(taxa_found_trimmed)] = taxa_found_trimmed
if (rewrite.names==TRUE)
{
names(df_outcome) = letters[1:ncol(df_outcome)]
}
names(df_outcome) = paste(names(df_outcome),"star",sep=".")
stable = NA
feasible = TRUE
richness = NA
return(data.frame(df_planted, stable, feasible, richness, df_outcome))
}
for (i in 1:length(data_by_plot))
{
print(i)
process_plot(data_by_plot[[i]],rewrite.names = TRUE)
}
lapply(data_by_plot, process_plot,rewrite.names = TRUE)
sapply(data_by_plot, process_plot,rewrite.names = TRUE)
do.call("rbind",lapply(data_by_plot, process_plot,rewrite.names = TRUE))
data_processed = do.call("rbind",lapply(data_by_plot, process_plot,rewrite.names = TRUE))
data_processed
View(data_processed)
library(dplyr)
data_cc = read.csv('e120_Plant aboveground biomass data no header footer.txt',sep = '\t')
names_planted = (data_cc %>% select(Achmi:Sornu) %>% names)
process_taxon <- function(strings)
{
sapply(strings, function(string)
{
parts = strsplit(string, " ")[[1]]
p1 = substr(parts[1],1,3)
p2 = substr(parts[2],1,2)
fullname = paste(p1,p2,sep="")
if (fullname %in% names_planted)
{
fullname = fullname
}
else
{
fullname = paste(fullname, string,sep="*")
}
return(fullname)
})
}
names_all = process_taxon(data_cc$Species %>% unique)
# make sure all names are unique
stopifnot(length(unique(names_all)) == length(names_all))
process_plot <- function(df, rewrite.names=FALSE)
{
inputs_planted = df[1,names_planted] # since all the planting within a plot should be constant
taxa_planted = names(inputs_planted)[which(inputs_planted==1)]
# get biomasses
taxa_found = df$Biomass..g.m2.
names(taxa_found) = df$Taxon
taxa_found_trimmed = taxa_found[names(taxa_found) %in% names_planted]
# sum up biomass by name (seems there are sometimes duplicates)
taxa_found_trimmed = tapply(unlist(taxa_found_trimmed), names(unlist(taxa_found_trimmed)), sum)
df_planted = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_planted) = names_planted
df_planted[1,taxa_planted] = 1
if (rewrite.names==TRUE)
{
names(df_planted) = letters[1:ncol(df_planted)]
}
df_outcome = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_outcome) = names_planted
df_outcome[1,names(taxa_found_trimmed)] = taxa_found_trimmed
if (rewrite.names==TRUE)
{
names(df_outcome) = letters[1:ncol(df_outcome)]
}
names(df_outcome) = paste(names(df_outcome),"star",sep=".")
stable = NA
feasible = TRUE
richness = NA
return(data.frame(df_planted, stable, feasible, richness, df_outcome))
}
process_data_by_year <- function(year_this)
{
# select most recent data
data_by_plot = data_cc %>%
filter(Year==year_this) %>%
group_by(Plot) %>%
select(Species, all_of(names_planted), Biomass..g.m2.) %>%
mutate(Taxon = process_taxon(Species)) %>%
group_split
data_processed = do.call("rbind",lapply(data_by_plot, process_plot,rewrite.names = TRUE))
return(data_processed)
}
data_2018 = process_data_by_year(2018)
data_2018
data_2017 = process_data_by_year(2017)
data_2016 = process_data_by_year(2016)
data_2016
View(data_2016)
data_2018[,a:r]
data_2018 %>% select(a:r)
(data_2018 %>% select(a:r)) - (data_2017 %>% select(a:r))
(data_2018 %>% select(a:r)) - (data_2017 %>% select(a:r)) %>% as.numeric
(data_2018 %>% select(a:r)) - (data_2017 %>% select(a:r)) %>% View
diffs = (data_2018 %>% select(a:r)) - (data_2017 %>% select(a:r))
diffs
View(diffs)
as.matrix(diffs)
as.matrix(diffs) %>% as.numeric
any(as.numeric(as.matrix(diffs)) > 0)
any(as.numeric(as.matrix(diffs)) != 0)
stopifnot(any(as.numeric(as.matrix(diffs)) != 0))
stopifnot(all(as.numeric(as.matrix(diffs)) == 0))
stopifnot(all(as.numeric(as.matrix(diffs_2017_2016)) == 0))
diffs_2017_2016 = (data_2017 %>% select(a:r)) - (data_2016 %>% select(a:r))
stopifnot(all(as.numeric(as.matrix(diffs_2017_2016)) == 0))
# check row ordering is constant
diffs_2018_2017 = (data_2018 %>% select(all_of(letters[1:length(names_planted))) - (data_2017 %>% select(all_of(letters[1:length(names_planted))))
# check row ordering is constant
diffs_2018_2017 = (data_2018 %>% select(all_of(letters[1:length(names_planted))) - (data_2017 %>% select(all_of(letters[1:length(names_planted)))
data_2018 %>% select(all_of(letters[1:length(names_planted)))
data_2018 %>% select(all_of(letters[1:length(names_planted))
data_2018 %>% select(all_of(letters[1:length(names_planted)]))
diffs_2017_2016 = (data_2017 %>% select(all_of(letters[1:length(names_planted)])) - data_2016 %>% select(all_of(letters[1:length(names_planted)])))
# check row ordering is constant
diffs_2018_2017 = (data_2018 %>% select(all_of(letters[1:length(names_planted)])) - data_2017 %>% select(all_of(letters[1:length(names_planted)])))
diffs_2017_2016 = (data_2017 %>% select(all_of(letters[1:length(names_planted)])) - data_2016 %>% select(all_of(letters[1:length(names_planted)])))
stopifnot(all(as.numeric(as.matrix(diffs_2018_2017)) == 0))
stopifnot(all(as.numeric(as.matrix(diffs_2017_2016)) == 0))
data_2018 %>% select(all_of(paste(letters[1:length(names_planted)],"star",sep=".")))
data_2016 %>% select(all_of(paste(letters[1:length(names_planted)],"star",sep=".")))
data_2018 %>% select(all_of(paste(letters[1:length(names_planted)],"star",sep=".")))
?
?)
?array
array(list(data_2018 %>% select(all_of(paste(letters[1:length(names_planted)],"star",sep="."))),
data_2017 %>% select(all_of(paste(letters[1:length(names_planted)],"star",sep="."))),
data_2016 %>% select(all_of(paste(letters[1:length(names_planted)],"star",sep=".")))),
dim=c(nrow(data_2018),length(names_planted),3)
)
?simplify2array
star_2018 = data_2018 %>% select(all_of(paste(letters[1:length(names_planted)],"star",sep=".")))
star_2017 = data_2017 %>% select(all_of(paste(letters[1:length(names_planted)],"star",sep=".")))
star_2016 = data_2016 %>% select(all_of(paste(letters[1:length(names_planted)],"star",sep=".")))
simplify2array(list(star_2016, star_2017, star_2018))
star_2018 = as.matrix(data_2018 %>% select(all_of(paste(letters[1:length(names_planted)],"star",sep="."))))
star_2017 = as.matrix(data_2017 %>% select(all_of(paste(letters[1:length(names_planted)],"star",sep="."))))
star_2016 = as.matrix(data_2016 %>% select(all_of(paste(letters[1:length(names_planted)],"star",sep="."))))
simplify2array(list(star_2016, star_2017, star_2018))
star = simplify2array(list(star_2016, star_2017, star_2018))
star
apply(star, 3, sd)
apply(star, c(1,2), sd)
apply(star, c(1,2), function(x) { sd(x)/mean(x) } )
apply(star, c(1,2), function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)] = 0; return(CV) } )
apply(star, c(1,2), function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)] = 0; return(cv) } )
# look for temporal variation in each species biomass over time
star_2018 = as.matrix(data_2018 %>% select(all_of(paste(letters[1:length(names_planted)],"star",sep="."))))
star_2017 = as.matrix(data_2017 %>% select(all_of(paste(letters[1:length(names_planted)],"star",sep="."))))
star_2016 = as.matrix(data_2016 %>% select(all_of(paste(letters[1:length(names_planted)],"star",sep="."))))
star = simplify2array(list(star_2016, star_2017, star_2018))
cv.star = apply(star, c(1,2), function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)] = 0; return(cv) } )
# calculate elementwise coefficient of variation over time
cv.star = apply(star, c(1,2), function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)] = 0; return(cv) } )
cv.star
cv.star %>% View
apply(cv.star, 1, mean)
cv.star.mean = apply(cv.star, 1, mean)
apply(cv.star, 1, mean) < 0.5
data_final = data_2018
data_final
str(data_final)
data_final$stable = (cv.star.mean < 0.5)
View(data_final)
data_final %>% select(all_of(paste(letters[1:length(names_planted)],"star",sep=".")))
data_final$richness = apply(data_final %>% select(all_of(paste(letters[1:length(names_planted)],"star",sep="."))),1,function(x) { sum(x>0)})
data_final$richness
data_final
View(data_final)
write.csv(data_final, file='cedar_creek_2018.csv',row.names = FALSE)
library(dplyr)
# this is the raw data file but with the header and footer sections describing data reuse / provenance
data_cc = read.csv('e120_Plant aboveground biomass data no header footer.txt',sep = '\t')
names_planted = (data_cc %>% select(Achmi:Sornu) %>% names)
process_taxon <- function(strings)
{
sapply(strings, function(string)
{
parts = strsplit(string, " ")[[1]]
p1 = substr(parts[1],1,3)
p2 = substr(parts[2],1,2)
fullname = paste(p1,p2,sep="")
if (fullname %in% names_planted)
{
fullname = fullname
}
else
{
fullname = paste(fullname, string,sep="*")
}
return(fullname)
})
}
names_all = process_taxon(data_cc$Species %>% unique)
# make sure all names are unique
stopifnot(length(unique(names_all)) == length(names_all))
process_plot <- function(df, rewrite.names=FALSE)
{
inputs_planted = df[1,names_planted] # since all the planting within a plot should be constant
taxa_planted = names(inputs_planted)[which(inputs_planted==1)]
# get biomasses
taxa_found = df$Biomass..g.m2.
names(taxa_found) = df$Taxon
taxa_found_trimmed = taxa_found[names(taxa_found) %in% names_planted]
# sum up biomass by name (seems there are sometimes duplicates)
taxa_found_trimmed = tapply(unlist(taxa_found_trimmed), names(unlist(taxa_found_trimmed)), sum)
df_planted = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_planted) = names_planted
df_planted[1,taxa_planted] = 1
if (rewrite.names==TRUE)
{
names(df_planted) = letters[1:ncol(df_planted)]
}
df_outcome = data.frame(matrix(nrow=1,ncol=length(names_planted),data=0))
names(df_outcome) = names_planted
df_outcome[1,names(taxa_found_trimmed)] = taxa_found_trimmed
if (rewrite.names==TRUE)
{
names(df_outcome) = letters[1:ncol(df_outcome)]
}
names(df_outcome) = paste(names(df_outcome),"star",sep=".")
stable = NA
feasible = TRUE
richness = NA
return(data.frame(df_planted, stable, feasible, richness, df_outcome))
}
process_data_by_year <- function(year_this)
{
# select most recent data
data_by_plot = data_cc %>%
filter(Year==year_this) %>%
group_by(Plot) %>%
select(Species, all_of(names_planted), Biomass..g.m2.) %>%
mutate(Taxon = process_taxon(Species)) %>%
group_split
data_processed = do.call("rbind",lapply(data_by_plot, process_plot,rewrite.names = TRUE))
return(data_processed)
}
data_2018 = process_data_by_year(2018)
data_2017 = process_data_by_year(2017)
data_2016 = process_data_by_year(2016)
# check row ordering is constant
diffs_2018_2017 = (data_2018 %>% select(all_of(letters[1:length(names_planted)])) - data_2017 %>% select(all_of(letters[1:length(names_planted)])))
diffs_2017_2016 = (data_2017 %>% select(all_of(letters[1:length(names_planted)])) - data_2016 %>% select(all_of(letters[1:length(names_planted)])))
stopifnot(all(as.numeric(as.matrix(diffs_2018_2017)) == 0))
stopifnot(all(as.numeric(as.matrix(diffs_2017_2016)) == 0))
# look for temporal variation in each species biomass over time
star_2018 = as.matrix(data_2018 %>% select(all_of(paste(letters[1:length(names_planted)],"star",sep="."))))
star_2017 = as.matrix(data_2017 %>% select(all_of(paste(letters[1:length(names_planted)],"star",sep="."))))
star_2016 = as.matrix(data_2016 %>% select(all_of(paste(letters[1:length(names_planted)],"star",sep="."))))
star = simplify2array(list(star_2016, star_2017, star_2018))
# calculate elementwise coefficient of variation over time
cv.star = apply(star, c(1,2), function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)] = 0; return(cv) } )
cv.star.mean = apply(cv.star, 1, mean)
data_final = data_2018
data_final$stable = (cv.star.mean < 0.5)
data_final$richness = apply(data_final %>% select(all_of(paste(letters[1:length(names_planted)],"star",sep="."))),1,function(x) { sum(x>0)})
write.csv(data_final, file='cedar_creek_2018.csv',row.names = FALSE)
