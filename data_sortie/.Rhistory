input = read.txt('~/Downloads/GMF with output STR 1.xml')
library(readr)
input = read_file('~/Downloads/GMF with output STR 1.xml')
input
input = read.delim('~/Downloads/GMF with output STR 1.xml',header=FALSE,delim="\n")
input = read.delim('~/Downloads/GMF with output STR 1.xml',header=FALSE,sep = ="\n")
input = read.delim('~/Downloads/GMF with output STR 1.xml',header=FALSE,sep ="\n")
input
input[1]
input[2]
str(input)
input$V1[1]
input$V1[2]
input$V1[3]
input$V1[4]
input$V1[5]
input$V1[6]
input$V1[7]
input$V1[8]
input$V1[9]
input$V1[10]
input$V1[11]
input = read.delim('~/Downloads/GMF with output STR 1.xml',header=FALSE,sep ="\n")$V1
input[2:(nsp+2)]
input[2:(n_sp+2)]
# assumes input has the initial abundances on lines 2-10 (9 species total)
n_sp = 9
input[2:(n_sp+2)]
input[2:(n_sp+1)]
input[offset:(n_sp+offset-1)]
offset = 2
input[offset:(n_sp+offset-1)]
expand.grid(rep(c(0,1),9))
replicate(c(0,1),9)
replicate(c(0,1),length=9)
data.frame(matrix(nrow=9,ncol=2))
data.frame(matrix(nrow=9,ncol=2,values=c(0,1)))
data.frame(matrix(nrow=9,ncol=2,x=c(0,1)))
?matrix
data.frame(matrix(nrow=9,ncol=2,data=c(0,1)))
data.frame(matrix(nrow=9,ncol=2,data=c(0,1),byrow=TRUE))
data.frame(t(matrix(nrow=9,ncol=2,data=c(0,1),byrow=TRUE)))
expand.grid(data.frame(t(matrix(nrow=9,ncol=2,data=c(0,1),byrow=TRUE))))
combinations = expand.grid(data.frame(t(matrix(nrow=n_sp,ncol=2,data=c(0,1),byrow=TRUE))))
combinations
image(combinations)
image(as.matrix(combinations))
combinations[1,]
which(combinations[1,]==1)
which(combinations[3,]==1)
which(combinations[352,]==1)
input[offset+which(combinations[352,]==1)-1]
input[offset+which(combinations[351,]==1)-1]
input[offset+which(combinations[35,]==1)-1]
input[offset+which(combinations[1,]==1)-1]
input[offset+which(combinations[2,]==1)-1]
for (i in 1:nrow(combinations))
{
output_this = input
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
output_this[offset:(n_sp+offset-1)]
}
}
for (i in 1:nrow(combinations))
{
output_this = input
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
print(output_this[offset:(n_sp+offset-1)])
}
}
input[offset:(n_sp+offset-1)]
combinations = expand.grid(data.frame(t(matrix(nrow=n_sp,ncol=2,data=c(0,1),byrow=TRUE))))
for (i in 1:nrow(combinations))
{
output_this = input
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
print(output_this[offset:(n_sp+offset-1)])
print("\n")
}
}
output_this[length(output_this)]
combinations[i,]
combinations[32,]
paste(combinations[32,])
paste(combinations[32,],collapse="-")
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
print(output_this[offset:(n_sp+offset-1)])
print("\n")
}
# rewrite output file
output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("GMF_%s.out",paste(combinations[i,],collapse="-")), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
View(output_this_final)
write.table(output_this_final,file = sprintf("input_%s.xml",file_id),quote = FALSE,row.names = FALSE)
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
print(output_this[offset:(n_sp+offset-1)])
print("\n")
}
# rewrite output file
file_id = paste(combinations[i,],collapse="-")
output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("GMF_%s.out",file_id), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
write.table(output_this_final,file = sprintf("input_%s.xml",file_id),quote = FALSE,row.names = FALSE)
write.table(output_this_final,file = sprintf("input_%s.xml",file_id),quote = FALSE,row.names = FALSE,col.names = FALSE)
dir.create("inputs")
# assumes input has the initial abundances on lines 2-10 (9 species total)
n_sp = 9
offset = 2
input = read.delim('~/Downloads/GMF with output STR 1.xml',header=FALSE,sep ="\n")$V1
dir.create("inputs")
combinations = expand.grid(data.frame(t(matrix(nrow=n_sp,ncol=2,data=c(0,1),byrow=TRUE))))
for (i in 1:nrow(combinations))
{
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
print(output_this[offset:(n_sp+offset-1)])
print("\n")
}
# rewrite output file
file_id = paste(combinations[i,],collapse="-")
output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("GMF_%s.out",file_id), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
write.table(output_this_final,file = sprintf("inputs/input_%s.xml",file_id),quote = FALSE,row.names = FALSE,col.names = FALSE)
}
# assumes input has the initial abundances on lines 2-10 (9 species total)
n_sp = 9
offset = 2
input = read.delim('~/Downloads/GMF with output STR 1.xml',header=FALSE,sep ="\n")$V1
dir.create("inputs")
combinations = expand.grid(data.frame(t(matrix(nrow=n_sp,ncol=2,data=c(0,1),byrow=TRUE))))
for (i in 1:nrow(combinations))
{
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
message('.')
}
# rewrite output file
file_id = paste(combinations[i,],collapse="-")
output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("GMF_%s.out",file_id), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
write.table(output_this_final,file = sprintf("inputs/input_%s.xml",file_id),quote = FALSE,row.names = FALSE,col.names = FALSE)
}
# assumes input has the initial abundances on lines 2-10 (9 species total)
n_sp = 9
offset = 2
input = read.delim('~/Downloads/GMF with output STR 1.xml',header=FALSE,sep ="\n")$V1
dir.create("inputs")
combinations = expand.grid(data.frame(t(matrix(nrow=n_sp,ncol=2,data=c(0,1),byrow=TRUE))))
for (i in 1:nrow(combinations))
{
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
message('.')
}
# rewrite output file
file_id = paste(combinations[i,],collapse="-")
output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("outputs/GMF_%s.out",file_id), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
write.table(output_this_final,file = sprintf("inputs/input_%s.xml",file_id),quote = FALSE,row.names = FALSE,col.names = FALSE)
}
?writeLines
# assumes input has the initial abundances on lines 2-10 (9 species total)
n_sp = 9
offset = 2
input = read.delim('~/Downloads/GMF with output STR 1.xml',header=FALSE,sep ="\n")$V1
dir.create("inputs")
combinations = expand.grid(data.frame(t(matrix(nrow=n_sp,ncol=2,data=c(0,1),byrow=TRUE))))
for (i in 1:nrow(combinations))
{
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
#output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
message('.')
}
# rewrite output file
file_id = paste(combinations[i,],collapse="-")
#output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("outputs/GMF_%s.out",file_id), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
writeLines(text=output_this_final,con = sprintf("inputs/input_%s.xml",file_id))
}
input = readLines('~/Downloads/GMF with output STR 1.xml')
input
input = readLines('~/Downloads/GMF with output STR 1.xml')
# assumes input has the initial abundances on lines 2-10 (9 species total)
n_sp = 9
offset = 2
input = readLines('~/Downloads/GMF with output STR 1.xml')
dir.create("inputs")
combinations = expand.grid(data.frame(t(matrix(nrow=n_sp,ncol=2,data=c(0,1),byrow=TRUE))))
for (i in 1:nrow(combinations))
{
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
#output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
message('.')
}
# rewrite output file
file_id = paste(combinations[i,],collapse="-")
#output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("outputs/GMF_%s.out",file_id), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
writeLines(text=output_this_final,con = sprintf("inputs/input_%s.xml",file_id))
}
# assumes input has the initial abundances on lines 2-10 (9 species total)
n_sp = 9
offset = 2
input = readLines('~/Downloads/GMF with output STR 1.xml')
dir.create("inputs")
combinations = expand.grid(data.frame(t(matrix(nrow=n_sp,ncol=2,data=c(0,1),byrow=TRUE))))
for (i in 1:nrow(combinations))
{
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
#output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
message('.')
}
# rewrite output file
file_id = paste(combinations[i,],collapse="-")
#output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("outputs/GMF_%s.out",file_id), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
writeLines(text=output_this_final,con = sprintf("inputs/input_%s.xml",file_id))
}
# assumes input has the initial abundances on lines 2-10 (9 species total)
n_sp = 9
offset = 2
input = readLines('~/Downloads/GMF with output STR 1.xml')
dir.create("inputs")
combinations = expand.grid(data.frame(t(matrix(nrow=n_sp,ncol=2,data=c(0,1),byrow=TRUE))))
for (i in 1:nrow(combinations))
{
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
message('.')
}
# rewrite output file
file_id = paste(combinations[i,],collapse="-")
output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("outputs/GMF_%s.out",file_id), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
writeLines(text=output_this_final,con = sprintf("inputs/input_%s.xml",file_id))
}
# assumes input has the initial abundances on lines 2-10 (9 species total)
n_sp = 9
offset = 2
input = readLines('~/Downloads/GMF with output STR 1.xml')
dir.create("inputs")
combinations = expand.grid(data.frame(t(matrix(nrow=n_sp,ncol=2,data=c(0,1),byrow=TRUE))))
for (i in 1:nrow(combinations))
{
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
message('.')
}
# rewrite output file
file_id = paste(combinations[i,],collapse="-")
output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("outputs/GMF_%s.out",file_id), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
writeLines(text=output_this_final,con = sprintf("inputs/input_%s.xml",file_id))
}
files = dir('outputs',pattern = '*out')
files
files = dir('outputs',pattern = '*out',full.names = TRUE)
files
read.table(files[1],sep = '\t')
read.table(files[1],sep = '\t', skip=5)
df_this = read.table(files[1], sep = '\t', skip=5)
df_this
str(df_this)
df_this = read.table(files[1], sep = '\t', skip=5, header=TRUE)
df_this
names(df_this)
grep("Abs.Den.",names(df_this))
grep("Abs.Den.",names(df_this),fixed=TRUE)
df_this[,grep("Abs.Den.",names(df_this),fixed=TRUE)]
df_this[1:5,grep("Abs.Den.",names(df_this),fixed=TRUE)]
df_this[1:5,grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
df_this[1:5,grep("Sapl.Abs.Den.",names(df_this),fixed=TRUE)]
df_this[1:5,grep("Adult.Abs.Den.",names(df_this),fixed=TRUE)]
df_this[,grep("Adult.Abs.Den.",names(df_this),fixed=TRUE)]
df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
df_this[nrow(df_this),grep("Sapl.Abs.Den.",names(df_this),fixed=TRUE)]
df_this[nrow(df_this),grep("Adult.Abs.Den.",names(df_this),fixed=TRUE)]
df_this[nrow(df_this),grep("Sdl.Abs.BA.",names(df_this),fixed=TRUE)]
df_this[1:5,grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
na
names(df_this)
df_this[nrow(df_this),grep("Sdl.Abs.BA.",names(df_this),fixed=TRUE)]
df_this[nrow(df_this),grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)]
df_this[nrow(df_this),grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)]
df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
df_this[nrow(df_this),grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)]
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
df_this[nrow(df_this),grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)] + df_this[nrow(df_this),grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)]
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
ba_this = df_this[nrow(df_this),grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)] + df_this[nrow(df_this),grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)]
tail(df_this[,grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)],1)
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
ba_this = tail(df_this[,grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)],1) + tail(df_this[,grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)])
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
ba_this = tail(df_this[,grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)],1) + tail(df_this[,grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)],1)
ba_this
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
ba_final_this = tail(df_this[,grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)],1) + tail(df_this[,grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)],1)
ba_final_this = tail(df_this[,grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)],10) + tail(df_this[,grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)],10)
ba_final_this
ba_last_50yr_this = tail(df_this[,grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)],10) + tail(df_this[,grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)],10)
ba_last_50yr_this = tail(df_this[,grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)],10) + tail(df_this[,grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)],10)
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
ba_final_this = tail(df_this[,grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)],1) + tail(df_this[,grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)],1)
ba_last_50yr_this
apply(ba_last_50yr_this, 2, sd)
apply(ba_last_50yr_this, 2, function(x) {sd(x)/mean(x)})
mean(apply(ba_last_50yr_this, 2, function(x) {sd(x)/mean(x)}))
mean(apply(ba_last_50yr_this, 2, function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)]=0; cv   }) )
apply(ba_last_50yr_this, 2, function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)]=0; cv   })
ba_cv_last_50yr_this = apply(ba_last_50yr_this, 2, function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)]=0; cv   })
ba_cv_last_50yr_this
names(df_this)
files
basename(files[1])
basename = gsub("GMF_","",basename(files[1]))
basename
fn_this = gsub("_[0-9]\\.out","",gsub("GMF_","",basename(files[1])))
fn_this
df_this = read.table(files[i], sep = '\t', skip=5, header=TRUE)
i=1
i=1
df_this = read.table(files[i], sep = '\t', skip=5, header=TRUE)
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
ba_final_this = tail(df_this[,grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)],1) + tail(df_this[,grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)],1)
ba_last_50yr_this = tail(df_this[,grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)],10) + tail(df_this[,grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)],10)
ba_cv_last_50yr_this = apply(ba_last_50yr_this, 2, function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)]=0; cv   })
fn_this = gsub("_[0-9]\\.out","",gsub("GMF_","",basename(files[i])))
fn_this
ba_final_this
df_this[1,]
# assumes input has the initial abundances on lines 2-10 (9 species total)
n_sp = 9
offset = 2
input = readLines('~/Downloads/GMF with output STR 1.xml')
dir.create("inputs")
combinations = expand.grid(data.frame(t(matrix(nrow=n_sp,ncol=2,data=c(0,1),byrow=TRUE))))
for (i in 1:nrow(combinations))
{
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==0)
if (length(ids_to_edit)>0)
{
output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
message('.')
}
# rewrite output file
file_id = paste(combinations[i,],collapse="-")
output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("outputs/GMF_%s.out",file_id), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
writeLines(text=output_this_final,con = sprintf("inputs/input_%s.xml",file_id))
# put all input files on the virtual machine, then in SORTIE create a new batch file, running each input 5x
}
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
n_final_this = tail(df_this[,grep("Sapl.Abs.Den.",names(df_this),fixed=TRUE)],1) + tail(df_this[,grep("Adult.Abs.Den.",names(df_this),fixed=TRUE)],1)
n_last_50yr_this = tail(df_this[,grep("Sapl.Abs.Den.",names(df_this),fixed=TRUE)],10) + tail(df_this[,grep("Adult.Abs.Den.",names(df_this),fixed=TRUE)],10)
n_cv_last_50yr_this = apply(ba_last_50yr_this, 2, function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)]=0; cv   })
files = dir('outputs',pattern = '*out',full.names = TRUE)
i=1
df_this = read.table(files[i], sep = '\t', skip=5, header=TRUE)
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
n_final_this = tail(df_this[,grep("Sapl.Abs.Den.",names(df_this),fixed=TRUE)],1) + tail(df_this[,grep("Adult.Abs.Den.",names(df_this),fixed=TRUE)],1)
n_last_50yr_this = tail(df_this[,grep("Sapl.Abs.Den.",names(df_this),fixed=TRUE)],10) + tail(df_this[,grep("Adult.Abs.Den.",names(df_this),fixed=TRUE)],10)
n_cv_last_50yr_this = apply(ba_last_50yr_this, 2, function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)]=0; cv   })
fn_this = gsub("_[0-9]\\.out","",gsub("GMF_","",basename(files[i])))
n_final_this
n_last_50yr_this
n_cv_last_50yr_this
n_cv_last_50yr_this = apply(n_last_50yr_this, 2, function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)]=0; cv   })
n_cv_last_50yr_this
n_cv_last_50yr_mean_this = mean(n_cv_last_50yr_this)
n_cv_last_50yr_mean_this
# assumes input has the initial abundances on lines 2-10 (9 species total)
n_sp = 9
offset = 2
input = readLines('GMF with correct weibell dispersal and output.xml')
dir.create("inputs")
combinations = expand.grid(data.frame(t(matrix(nrow=n_sp,ncol=2,data=c(0,1),byrow=TRUE))))
for (i in 1:nrow(combinations))
{
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==0)
if (length(ids_to_edit)>0)
{
output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
message('.')
}
# rewrite output file
file_id = paste(combinations[i,],collapse="-")
output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("outputs/GMF_%s.out",file_id), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
writeLines(text=output_this_final,con = sprintf("inputs/input_GMF_%s.xml",file_id))
# put all input files on the virtual machine, then in SORTIE create a new batch file, running each input 5x
}
