output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
print(output_this[offset:(n_sp+offset-1)])
print("\n")
}
# rewrite output file
output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("GMF_%s.out",paste(combinations[i,],collapse="-")), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
View(output_this_final)
write.table(output_this_final,file = sprintf("input_%s.xml",file_id),quote = FALSE,row.names = FALSE)
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
print(output_this[offset:(n_sp+offset-1)])
print("\n")
}
# rewrite output file
file_id = paste(combinations[i,],collapse="-")
output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("GMF_%s.out",file_id), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
write.table(output_this_final,file = sprintf("input_%s.xml",file_id),quote = FALSE,row.names = FALSE)
write.table(output_this_final,file = sprintf("input_%s.xml",file_id),quote = FALSE,row.names = FALSE,col.names = FALSE)
dir.create("inputs")
# assumes input has the initial abundances on lines 2-10 (9 species total)
n_sp = 9
offset = 2
input = read.delim('~/Downloads/GMF with output STR 1.xml',header=FALSE,sep ="\n")$V1
dir.create("inputs")
combinations = expand.grid(data.frame(t(matrix(nrow=n_sp,ncol=2,data=c(0,1),byrow=TRUE))))
for (i in 1:nrow(combinations))
{
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
print(output_this[offset:(n_sp+offset-1)])
print("\n")
}
# rewrite output file
file_id = paste(combinations[i,],collapse="-")
output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("GMF_%s.out",file_id), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
write.table(output_this_final,file = sprintf("inputs/input_%s.xml",file_id),quote = FALSE,row.names = FALSE,col.names = FALSE)
}
# assumes input has the initial abundances on lines 2-10 (9 species total)
n_sp = 9
offset = 2
input = read.delim('~/Downloads/GMF with output STR 1.xml',header=FALSE,sep ="\n")$V1
dir.create("inputs")
combinations = expand.grid(data.frame(t(matrix(nrow=n_sp,ncol=2,data=c(0,1),byrow=TRUE))))
for (i in 1:nrow(combinations))
{
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
message('.')
}
# rewrite output file
file_id = paste(combinations[i,],collapse="-")
output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("GMF_%s.out",file_id), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
write.table(output_this_final,file = sprintf("inputs/input_%s.xml",file_id),quote = FALSE,row.names = FALSE,col.names = FALSE)
}
# assumes input has the initial abundances on lines 2-10 (9 species total)
n_sp = 9
offset = 2
input = read.delim('~/Downloads/GMF with output STR 1.xml',header=FALSE,sep ="\n")$V1
dir.create("inputs")
combinations = expand.grid(data.frame(t(matrix(nrow=n_sp,ncol=2,data=c(0,1),byrow=TRUE))))
for (i in 1:nrow(combinations))
{
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
message('.')
}
# rewrite output file
file_id = paste(combinations[i,],collapse="-")
output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("outputs/GMF_%s.out",file_id), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
write.table(output_this_final,file = sprintf("inputs/input_%s.xml",file_id),quote = FALSE,row.names = FALSE,col.names = FALSE)
}
?writeLines
# assumes input has the initial abundances on lines 2-10 (9 species total)
n_sp = 9
offset = 2
input = read.delim('~/Downloads/GMF with output STR 1.xml',header=FALSE,sep ="\n")$V1
dir.create("inputs")
combinations = expand.grid(data.frame(t(matrix(nrow=n_sp,ncol=2,data=c(0,1),byrow=TRUE))))
for (i in 1:nrow(combinations))
{
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
#output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
message('.')
}
# rewrite output file
file_id = paste(combinations[i,],collapse="-")
#output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("outputs/GMF_%s.out",file_id), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
writeLines(text=output_this_final,con = sprintf("inputs/input_%s.xml",file_id))
}
input = readLines('~/Downloads/GMF with output STR 1.xml')
input
input = readLines('~/Downloads/GMF with output STR 1.xml')
# assumes input has the initial abundances on lines 2-10 (9 species total)
n_sp = 9
offset = 2
input = readLines('~/Downloads/GMF with output STR 1.xml')
dir.create("inputs")
combinations = expand.grid(data.frame(t(matrix(nrow=n_sp,ncol=2,data=c(0,1),byrow=TRUE))))
for (i in 1:nrow(combinations))
{
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
#output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
message('.')
}
# rewrite output file
file_id = paste(combinations[i,],collapse="-")
#output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("outputs/GMF_%s.out",file_id), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
writeLines(text=output_this_final,con = sprintf("inputs/input_%s.xml",file_id))
}
# assumes input has the initial abundances on lines 2-10 (9 species total)
n_sp = 9
offset = 2
input = readLines('~/Downloads/GMF with output STR 1.xml')
dir.create("inputs")
combinations = expand.grid(data.frame(t(matrix(nrow=n_sp,ncol=2,data=c(0,1),byrow=TRUE))))
for (i in 1:nrow(combinations))
{
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
#output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
message('.')
}
# rewrite output file
file_id = paste(combinations[i,],collapse="-")
#output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("outputs/GMF_%s.out",file_id), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
writeLines(text=output_this_final,con = sprintf("inputs/input_%s.xml",file_id))
}
# assumes input has the initial abundances on lines 2-10 (9 species total)
n_sp = 9
offset = 2
input = readLines('~/Downloads/GMF with output STR 1.xml')
dir.create("inputs")
combinations = expand.grid(data.frame(t(matrix(nrow=n_sp,ncol=2,data=c(0,1),byrow=TRUE))))
for (i in 1:nrow(combinations))
{
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
message('.')
}
# rewrite output file
file_id = paste(combinations[i,],collapse="-")
output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("outputs/GMF_%s.out",file_id), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
writeLines(text=output_this_final,con = sprintf("inputs/input_%s.xml",file_id))
}
# assumes input has the initial abundances on lines 2-10 (9 species total)
n_sp = 9
offset = 2
input = readLines('~/Downloads/GMF with output STR 1.xml')
dir.create("inputs")
combinations = expand.grid(data.frame(t(matrix(nrow=n_sp,ncol=2,data=c(0,1),byrow=TRUE))))
for (i in 1:nrow(combinations))
{
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==1)
if (length(ids_to_edit)>0)
{
output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
message('.')
}
# rewrite output file
file_id = paste(combinations[i,],collapse="-")
output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("outputs/GMF_%s.out",file_id), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
writeLines(text=output_this_final,con = sprintf("inputs/input_%s.xml",file_id))
}
files = dir('outputs',pattern = '*out')
files
files = dir('outputs',pattern = '*out',full.names = TRUE)
files
read.table(files[1],sep = '\t')
read.table(files[1],sep = '\t', skip=5)
df_this = read.table(files[1], sep = '\t', skip=5)
df_this
str(df_this)
df_this = read.table(files[1], sep = '\t', skip=5, header=TRUE)
df_this
names(df_this)
grep("Abs.Den.",names(df_this))
grep("Abs.Den.",names(df_this),fixed=TRUE)
df_this[,grep("Abs.Den.",names(df_this),fixed=TRUE)]
df_this[1:5,grep("Abs.Den.",names(df_this),fixed=TRUE)]
df_this[1:5,grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
df_this[1:5,grep("Sapl.Abs.Den.",names(df_this),fixed=TRUE)]
df_this[1:5,grep("Adult.Abs.Den.",names(df_this),fixed=TRUE)]
df_this[,grep("Adult.Abs.Den.",names(df_this),fixed=TRUE)]
df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
df_this[nrow(df_this),grep("Sapl.Abs.Den.",names(df_this),fixed=TRUE)]
df_this[nrow(df_this),grep("Adult.Abs.Den.",names(df_this),fixed=TRUE)]
df_this[nrow(df_this),grep("Sdl.Abs.BA.",names(df_this),fixed=TRUE)]
df_this[1:5,grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
na
names(df_this)
df_this[nrow(df_this),grep("Sdl.Abs.BA.",names(df_this),fixed=TRUE)]
df_this[nrow(df_this),grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)]
df_this[nrow(df_this),grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)]
df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
df_this[nrow(df_this),grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)]
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
df_this[nrow(df_this),grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)] + df_this[nrow(df_this),grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)]
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
ba_this = df_this[nrow(df_this),grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)] + df_this[nrow(df_this),grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)]
tail(df_this[,grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)],1)
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
ba_this = tail(df_this[,grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)],1) + tail(df_this[,grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)])
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
ba_this = tail(df_this[,grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)],1) + tail(df_this[,grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)],1)
ba_this
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
ba_final_this = tail(df_this[,grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)],1) + tail(df_this[,grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)],1)
ba_final_this = tail(df_this[,grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)],10) + tail(df_this[,grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)],10)
ba_final_this
ba_last_50yr_this = tail(df_this[,grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)],10) + tail(df_this[,grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)],10)
ba_last_50yr_this = tail(df_this[,grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)],10) + tail(df_this[,grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)],10)
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
ba_final_this = tail(df_this[,grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)],1) + tail(df_this[,grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)],1)
ba_last_50yr_this
apply(ba_last_50yr_this, 2, sd)
apply(ba_last_50yr_this, 2, function(x) {sd(x)/mean(x)})
mean(apply(ba_last_50yr_this, 2, function(x) {sd(x)/mean(x)}))
mean(apply(ba_last_50yr_this, 2, function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)]=0; cv   }) )
apply(ba_last_50yr_this, 2, function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)]=0; cv   })
ba_cv_last_50yr_this = apply(ba_last_50yr_this, 2, function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)]=0; cv   })
ba_cv_last_50yr_this
names(df_this)
files
basename(files[1])
basename = gsub("GMF_","",basename(files[1]))
basename
fn_this = gsub("_[0-9]\\.out","",gsub("GMF_","",basename(files[1])))
fn_this
df_this = read.table(files[i], sep = '\t', skip=5, header=TRUE)
i=1
i=1
df_this = read.table(files[i], sep = '\t', skip=5, header=TRUE)
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
ba_final_this = tail(df_this[,grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)],1) + tail(df_this[,grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)],1)
ba_last_50yr_this = tail(df_this[,grep("Sapl.Abs.BA.",names(df_this),fixed=TRUE)],10) + tail(df_this[,grep("Adult.Abs.BA.",names(df_this),fixed=TRUE)],10)
ba_cv_last_50yr_this = apply(ba_last_50yr_this, 2, function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)]=0; cv   })
fn_this = gsub("_[0-9]\\.out","",gsub("GMF_","",basename(files[i])))
fn_this
ba_final_this
df_this[1,]
# assumes input has the initial abundances on lines 2-10 (9 species total)
n_sp = 9
offset = 2
input = readLines('~/Downloads/GMF with output STR 1.xml')
dir.create("inputs")
combinations = expand.grid(data.frame(t(matrix(nrow=n_sp,ncol=2,data=c(0,1),byrow=TRUE))))
for (i in 1:nrow(combinations))
{
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==0)
if (length(ids_to_edit)>0)
{
output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
message('.')
}
# rewrite output file
file_id = paste(combinations[i,],collapse="-")
output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("outputs/GMF_%s.out",file_id), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
writeLines(text=output_this_final,con = sprintf("inputs/input_%s.xml",file_id))
# put all input files on the virtual machine, then in SORTIE create a new batch file, running each input 5x
}
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
n_final_this = tail(df_this[,grep("Sapl.Abs.Den.",names(df_this),fixed=TRUE)],1) + tail(df_this[,grep("Adult.Abs.Den.",names(df_this),fixed=TRUE)],1)
n_last_50yr_this = tail(df_this[,grep("Sapl.Abs.Den.",names(df_this),fixed=TRUE)],10) + tail(df_this[,grep("Adult.Abs.Den.",names(df_this),fixed=TRUE)],10)
n_cv_last_50yr_this = apply(ba_last_50yr_this, 2, function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)]=0; cv   })
files = dir('outputs',pattern = '*out',full.names = TRUE)
i=1
df_this = read.table(files[i], sep = '\t', skip=5, header=TRUE)
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
n_final_this = tail(df_this[,grep("Sapl.Abs.Den.",names(df_this),fixed=TRUE)],1) + tail(df_this[,grep("Adult.Abs.Den.",names(df_this),fixed=TRUE)],1)
n_last_50yr_this = tail(df_this[,grep("Sapl.Abs.Den.",names(df_this),fixed=TRUE)],10) + tail(df_this[,grep("Adult.Abs.Den.",names(df_this),fixed=TRUE)],10)
n_cv_last_50yr_this = apply(ba_last_50yr_this, 2, function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)]=0; cv   })
fn_this = gsub("_[0-9]\\.out","",gsub("GMF_","",basename(files[i])))
n_final_this
n_last_50yr_this
n_cv_last_50yr_this
n_cv_last_50yr_this = apply(n_last_50yr_this, 2, function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)]=0; cv   })
n_cv_last_50yr_this
n_cv_last_50yr_mean_this = mean(n_cv_last_50yr_this)
n_cv_last_50yr_mean_this
# assumes input has the initial abundances on lines 2-10 (9 species total)
n_sp = 9
offset = 2
input = readLines('GMF with correct weibell dispersal and output.xml')
dir.create("inputs")
combinations = expand.grid(data.frame(t(matrix(nrow=n_sp,ncol=2,data=c(0,1),byrow=TRUE))))
for (i in 1:nrow(combinations))
{
# copy over all the text
output_this = input
# modulate the abundances from 25 to 0 for each species
ids_to_edit = which(combinations[i,]==0)
if (length(ids_to_edit)>0)
{
output_this[offset+ids_to_edit-1] = gsub("25.0","0.0",output_this[offset+ids_to_edit-1],fixed=TRUE)
message('.')
}
# rewrite output file
file_id = paste(combinations[i,],collapse="-")
output_this[length(output_this)] = gsub("GMFstr1.out",sprintf("outputs/GMF_%s.out",file_id), output_this[length(output_this)],fixed=TRUE)
output_this_final = paste(output_this,collapse="\n")
writeLines(text=output_this_final,con = sprintf("inputs/input_GMF_%s.xml",file_id))
# put all input files on the virtual machine, then in SORTIE create a new batch file, running each input 5x
}
library(dplyr)
library(data.table)
files = dir('outputs',pattern = '*out',full.names = TRUE)
df_this = read.table(files[1], sep = '\t', skip=5, header=TRUE)
df_this %>% names
df_this %>% select(Adult.Abs.Den..ACRU:Adult.Abs.Den..QURU)
df_this %>% select(Step, Adult.Abs.Den..ACRU:Adult.Abs.Den..QURU)
df_this %>% select(Step, Adult.Abs.Den..ACRU:Adult.Abs.Den..QURU) %>% melt
library(reshape)
df_this %>% select(Step, Adult.Abs.Den..ACRU:Adult.Abs.Den..QURU) %>% melt
df_this %>% select(Step, Adult.Abs.Den..ACRU:Adult.Abs.Den..QURU) %>% melt(key=key,var=var,-Step)
df_this %>% select(Step, Adult.Abs.Den..ACRU:Adult.Abs.Den..QURU) %>% melt(-Step)
?melt
df_this %>% select(Step, Adult.Abs.Den..ACRU:Adult.Abs.Den..QURU) %>% melt(measure.vars=-Step)
df_this %>% select(Step, Adult.Abs.Den..ACRU:Adult.Abs.Den..QURU) %>% melt(measure.vars=Step)
df_this %>% select(Step, Adult.Abs.Den..ACRU:Adult.Abs.Den..QURU) %>% as.data.frame %>% melt(measure.vars=Step)
df_this %>% select(Step, Adult.Abs.Den..ACRU:Adult.Abs.Den..QURU) %>% as.data.frame %>% melt(id=Step)
df_this %>% select(Step, Adult.Abs.Den..ACRU:Adult.Abs.Den..QURU) %>% as.data.frame %>% melt(id=1)
ggplot(df_melted_adult,aes(x=Step,y=value,col=variable)) +
geom_line() +
ggitlte(files[1])
library(ggplot2)
ggplot(df_melted_adult,aes(x=Step,y=value,col=variable)) +
geom_line() +
ggitlte(files[1])
df_melted_adult = df_this %>%
select(Step, Adult.Abs.Den..ACRU:Adult.Abs.Den..QURU) %>% as.data.frame %>%
melt(id=1)
ggplot(df_melted_adult,aes(x=Step,y=value,col=variable)) +
geom_line() +
ggitlte(files[1])
ggplot(df_melted_adult,aes(x=Step,y=value,col=variable)) +
geom_line() +
ggtitle(files[i])
ggplot(df_melted_adult,aes(x=Step,y=value,col=variable)) +
geom_line() +
ggtitle(files[1])
library(dplyr)
library(data.table)
library(reshape)
library(ggplot2)
files = dir('outputs',pattern = '*out',full.names = TRUE)
process_row <- function(i)
{
df_this = read.table(files[i], sep = '\t', skip=5, header=TRUE)
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
n_final_this = tail(df_this[,grep("Sapl.Abs.Den.",names(df_this),fixed=TRUE)],1) + tail(df_this[,grep("Adult.Abs.Den.",names(df_this),fixed=TRUE)],1)
n_last_50yr_this = tail(df_this[,grep("Sapl.Abs.Den.",names(df_this),fixed=TRUE)],10) + tail(df_this[,grep("Adult.Abs.Den.",names(df_this),fixed=TRUE)],10)
n_cv_last_50yr_this = apply(n_last_50yr_this, 2, function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)]=0; cv   })
n_cv_last_50yr_mean_this = mean(n_cv_last_50yr_this)
fn_this = gsub("_[0-9]\\.out","",gsub("GMF_","",basename(files[i])))
composition_initial_this = as.numeric(strsplit(fn_this, '-')[[1]])
df1 = data.frame(t(composition_initial_this))
names(df1) =letters[1:length(composition_initial_this)]
df2 = data.frame(feasible=TRUE,#all(n_final_this>=0),
stable=NA,#n_cv_last_50yr_mean_this<0.5,
richness = sum(n_final_this>=1))
df3 = data.frame(t(as.numeric(n_final_this)))
names(df3) = paste(letters[1:length(n_final_this)],"star",sep=".")
df_out = cbind(df1, df2, df3)
df_melted_adult = df_this %>%
select(Step, Adult.Abs.Den..ACRU:Adult.Abs.Den..QURU) %>% as.data.frame %>%
melt(id=1)
g = ggplot(df_melted_adult,aes(x=Step,y=value,col=variable)) +
geom_line() +
ggtitle(files[1])
ggsave(g, file=sprintf('~/Downloads/%s.pdf', fn_this))
cat('.')
return(df_out)
}
rows_all = lapply(1:length(files), process_row)
df_final = rbindlist(rows_all)
write.csv(df_final, file='data_sortie.csv', row.names=FALSE)
library(dplyr)
library(data.table)
library(reshape)
library(ggplot2)
files = dir('outputs',pattern = '*out',full.names = TRUE)
process_row <- function(i)
{
df_this = read.table(files[i], sep = '\t', skip=5, header=TRUE)
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
n_final_this = tail(df_this[,grep("Sapl.Abs.Den.",names(df_this),fixed=TRUE)],1) + tail(df_this[,grep("Adult.Abs.Den.",names(df_this),fixed=TRUE)],1)
n_last_50yr_this = tail(df_this[,grep("Sapl.Abs.Den.",names(df_this),fixed=TRUE)],10) + tail(df_this[,grep("Adult.Abs.Den.",names(df_this),fixed=TRUE)],10)
n_cv_last_50yr_this = apply(n_last_50yr_this, 2, function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)]=0; cv   })
n_cv_last_50yr_mean_this = mean(n_cv_last_50yr_this)
fn_this = gsub("_[0-9]\\.out","",gsub("GMF_","",basename(files[i])))
composition_initial_this = as.numeric(strsplit(fn_this, '-')[[1]])
df1 = data.frame(t(composition_initial_this))
names(df1) =letters[1:length(composition_initial_this)]
df2 = data.frame(feasible=TRUE,#all(n_final_this>=0),
stable=NA,#n_cv_last_50yr_mean_this<0.5,
richness = sum(n_final_this>=1))
df3 = data.frame(t(as.numeric(n_final_this)))
names(df3) = paste(letters[1:length(n_final_this)],"star",sep=".")
df_out = cbind(df1, df2, df3)
df_melted_adult = df_this %>%
select(Step, Adult.Abs.Den..ACRU:Adult.Abs.Den..QURU) %>% as.data.frame %>%
melt(id=1)
g = ggplot(df_melted_adult,aes(x=Step,y=value,col=variable)) +
geom_line() +
ggtitle(files[1]) +
theme_bw()
ggsave(g, file=sprintf('~/Downloads/%s.pdf', files[i]))
cat('.')
return(df_out)
}
rows_all = lapply(1:length(files), process_row)
df_final = rbindlist(rows_all)
write.csv(df_final, file='data_sortie.csv', row.names=FALSE)
library(dplyr)
library(data.table)
library(reshape)
library(ggplot2)
files = dir('outputs',pattern = '*out',full.names = TRUE)
process_row <- function(i)
{
df_this = read.table(files[i], sep = '\t', skip=5, header=TRUE)
#df_this[nrow(df_this),grep("Sdl.Abs.Den.",names(df_this),fixed=TRUE)]
n_final_this = tail(df_this[,grep("Sapl.Abs.Den.",names(df_this),fixed=TRUE)],1) + tail(df_this[,grep("Adult.Abs.Den.",names(df_this),fixed=TRUE)],1)
n_last_50yr_this = tail(df_this[,grep("Sapl.Abs.Den.",names(df_this),fixed=TRUE)],10) + tail(df_this[,grep("Adult.Abs.Den.",names(df_this),fixed=TRUE)],10)
n_cv_last_50yr_this = apply(n_last_50yr_this, 2, function(x) { cv = sd(x)/mean(x); cv[is.nan(cv)]=0; cv   })
n_cv_last_50yr_mean_this = mean(n_cv_last_50yr_this)
fn_this = gsub("_[0-9]\\.out","",gsub("GMF_","",basename(files[i])))
composition_initial_this = as.numeric(strsplit(fn_this, '-')[[1]])
df1 = data.frame(t(composition_initial_this))
names(df1) =letters[1:length(composition_initial_this)]
df2 = data.frame(feasible=TRUE,#all(n_final_this>=0),
stable=NA,#n_cv_last_50yr_mean_this<0.5,
richness = sum(n_final_this>=1))
df3 = data.frame(t(as.numeric(n_final_this)))
names(df3) = paste(letters[1:length(n_final_this)],"star",sep=".")
df_out = cbind(df1, df2, df3)
df_melted_adult = df_this %>%
select(Step, Adult.Abs.Den..ACRU:Adult.Abs.Den..QURU) %>% as.data.frame %>%
melt(id=1)
g = ggplot(df_melted_adult,aes(x=Step,y=value,col=variable)) +
geom_line() +
ggtitle(files[1]) +
theme_bw()
ggsave(g, file=sprintf('~/Downloads/%s.pdf', basename(files[i])))
cat('.')
return(df_out)
}
rows_all = lapply(1:length(files), process_row)
df_final = rbindlist(rows_all)
write.csv(df_final, file='data_sortie.csv', row.names=FALSE)
