library(dplyr)
library(tidyr)
# we assume the row and column orders are the same
params_vital = read.csv('speciesvitalrates.csv') %>%
select(-species)
params_alpha = read.csv('alpha_estimates_row_is_target.csv') %>%
select(-X) %>%
as.matrix
params_godoy = list(vital=params_vital, alpha=params_alpha)
# make assemblages
generate_assemblages <- function(n, labels=letters)
{
df = expand.grid(replicate(n, 0:1, simplify = FALSE))
names(df) = labels[1:n]
x_star = as.data.frame(matrix(data=0,nrow=nrow(df),ncol=ncol(df)))
names(x_star) = paste(names(df),"star",sep=".")
df_final = data.frame(df,
stable=NA,
feasible=NA,
richness=NA,
x_star)
return(df_final)
}
assign_params <- function(assemblage, params)
{
stopifnot(nrow(assemblage)==1)
# find species that are present
species_indices_present = which(as.numeric(assemblage)==1)
# pick subset of parameters (assuming that the parameters don't change when subsetting)
vital_this = params$vital[species_indices_present, , drop=FALSE]
alpha_this = params$alpha[species_indices_present, species_indices_present, drop=FALSE]
return(list(vital= vital_this,alpha= alpha_this))
}
fill_in_assemblages <- function(assemblages, params)
{
n = log2(nrow(assemblages))
for (i in 1:nrow(assemblages)) # skip the no-species scenario
{
message(i/nrow(assemblages))
params_this_row = assign_params(assemblage = assemblages[i,1:n], params = params)
#x_star = determine_fixed_point(params_this_row)
#assemblages[i,"stable"] = determine_stability(params_this_row)
#assemblages[i,"feasible"] = determine_feasibility(params_this_row)
#if (!is.null(x_star))
{
#assemblages[i,names(x_star)] = x_star
}
#assemblages[i,"richness"] = sum(x_star > 0.01)
}
return(assemblages)
}
assemblages_godoy = generate_assemblages(n = nrow(params_vital))
assemblages_godoy = fill_in_assemblages(params = params_godoy, assemblages = assemblages_godoy)
?F
do_simulation_annual_plant(vital, alpha)
{
nsp = nrow(vital)
nstep = 1000
n = matrix(NA, nrow=nstep,ncol=nsp)
for (t in 1:(nrow(n)-1))
{
fec = rep(NA, nsp)
for (i in 1:nsp)
{
term2 = 0
for (j in 1:nsp)
{
term2 = term2 + alpha[i,j]*vital$g[j]*n[t,j]
}
fec[i] = vital$lambda[i] / ( 1 + alpha[i,i]*vital$g[i]*n[t,i] + term2  )
n[t+1,i] = (1 - vital$g[i])*vital$s[i]+vital$g[i]*fec[i]
}
}
return(n)
}
do_simulation_annual_plant(params_vital, params_alpha)
do_simulation_annual_plant <- function(vital, alpha)
{
nsp = nrow(vital)
nstep = 1000
n = matrix(NA, nrow=nstep,ncol=nsp)
for (t in 1:(nrow(n)-1))
{
fec = rep(NA, nsp)
for (i in 1:nsp)
{
term2 = 0
for (j in 1:nsp)
{
term2 = term2 + alpha[i,j]*vital$g[j]*n[t,j]
}
fec[i] = vital$lambda[i] / ( 1 + alpha[i,i]*vital$g[i]*n[t,i] + term2  )
n[t+1,i] = (1 - vital$g[i])*vital$s[i]+vital$g[i]*fec[i]
}
}
return(n)
}
do_simulation_annual_plant(params_vital, params_alpha)
do_simulation_annual_plant <- function(vital, alpha)
{
nsp = nrow(vital)
nstep = 1000
n = matrix(NA, nrow=nstep,ncol=nsp)
# set initial abundance
n[1,] = 1
for (t in 1:(nrow(n)-1))
{
fec = rep(NA, nsp)
for (i in 1:nsp)
{
term2 = 0
for (j in 1:nsp)
{
term2 = term2 + alpha[i,j]*vital$g[j]*n[t,j]
}
fec[i] = vital$lambda[i] / ( 1 + alpha[i,i]*vital$g[i]*n[t,i] + term2  )
n[t+1,i] = (1 - vital$g[i])*vital$s[i]+vital$g[i]*fec[i]
}
}
return(n)
}
do_simulation_annual_plant(params_vital, params_alpha)
names(alpha)
names(params_alpha)
params_alpha
names(params_vital)
do_simulation_annual_plant <- function(vital, alpha)
{
nsp = nrow(vital)
nstep = 10
n = matrix(NA, nrow=nstep,ncol=nsp)
# set initial abundance
n[1,] = 1
for (t in 1:(nrow(n)-1))
{
fec = rep(NA, nsp)
for (i in 1:nsp)
{
term2 = 0
for (j in 1:nsp)
{
term2 = term2 + alpha[i,j]*vital$g[j]*n[t,j]
print(term2)
}
fec[i] = vital$lambda[i] / ( 1 + alpha[i,i]*vital$g[i]*n[t,i] + term2  )
print(fec)
n[t+1,i] = (1 - vital$g[i])*vital$s[i]+vital$g[i]*fec[i]
}
}
return(n)
}
names(params_vital)
do_simulation_annual_plant(params_vital, params_alpha)
do_simulation_annual_plant <- function(vital, alpha)
{
nsp = nrow(vital)
nstep = 10
n = matrix(NA, nrow=nstep,ncol=nsp)
# set initial abundance
n[1,] = 1
for (t in 1:(nrow(n)-1))
{
fec = rep(NA, nsp)
for (i in 1:nsp)
{
term2 = 0
for (j in 1:nsp)
{
term2 = term2 + alpha[i,j]*vital$g[j]*n[t,j]
}
print(term2)
fec[i] = vital$lambda[i] / ( 1 + alpha[i,i]*vital$g[i]*n[t,i] + term2  )
print(fec)
n[t+1,i] = (1 - vital$g[i])*vital$s[i]+vital$g[i]*fec[i]
}
}
return(n)
}
do_simulation_annual_plant(params_vital, params_alpha)
params_alpha[3,2]
params_alpha
params_alpha_gapfill[is.na(params_alpha_gapfill)] = 0
params_alpha_gapfill = params_alpha
params_alpha_gapfill[is.na(params_alpha_gapfill)] = 0
params_alpha_gapfill[is.na(params_alpha_gapfill)] = mean(params_alpha,na.rm=T)
params_alpha = read.csv('alpha_estimates_row_is_target.csv') %>%
select(-X) %>%
as.matrix
params_alpha_gapfill = params_alpha
params_alpha_gapfill[is.na(params_alpha_gapfill)] = mean(params_alpha,na.rm=T)
params_alpha_gapfill
params_godoy = list(vital=params_vital, alpha=params_alpha_gapfill)
do_simulation_annual_plant(params_vital, params_alpha)
do_simulation_annual_plant(params_vital, params_alpha_gapfill)
do_simulation_annual_plant(params_vital, params_alpha_gapfill) %>% plot
do_simulation_annual_plant <- function(vital, alpha)
{
nsp = nrow(vital)
nstep = 10
n = matrix(NA, nrow=nstep,ncol=nsp)
# set initial abundance
n[1,] = 1
for (t in 1:(nrow(n)-1))
{
fec = rep(NA, nsp)
for (i in 1:nsp)
{
term2 = 0
for (j in 1:nsp)
{
term2 = term2 + alpha[i,j]*vital$g[j]*n[t,j]
}
fec[i] = vital$lambda[i] / ( 1 + alpha[i,i]*vital$g[i]*n[t,i] + term2  )
n[t+1,i] = (1 - vital$g[i])*vital$s[i]+vital$g[i]*fec[i]
}
}
return(n)
}
do_simulation_annual_plant(params_vital, params_alpha_gapfill) %>% plot
do_simulation_annual_plant(params_vital, params_alpha_gapfill)
do_simulation_annual_plant <- function(vital, alpha, nstep=100)
{
nsp = nrow(vital)
n = matrix(NA, nrow=nstep,ncol=nsp)
# set initial abundance
n[1,] = 1
for (t in 1:(nrow(n)-1))
{
fec = rep(NA, nsp)
for (i in 1:nsp)
{
term2 = 0
for (j in 1:nsp)
{
term2 = term2 + alpha[i,j]*vital$g[j]*n[t,j]
}
fec[i] = vital$lambda[i] / ( 1 + alpha[i,i]*vital$g[i]*n[t,i] + term2  )
n[t+1,i] = (1 - vital$g[i])*vital$s[i]+vital$g[i]*fec[i]
}
}
return(n)
}
do_simulation_annual_plant(params_vital, params_alpha_gapfill)
image(do_simulation_annual_plant(params_vital, params_alpha_gapfill))
z = do_simulation_annual_plant(params_vital, params_alpha_gapfill)
tail(z)
do_simulation_annual_plant <- function(vital, alpha, nstep=100)
{
nsp = nrow(vital)
n = matrix(NA, nrow=nstep,ncol=nsp)
# set initial abundance
n[1,] = 1
for (t in 1:(nrow(n)-1))
{
fec = rep(NA, nsp)
for (i in 1:nsp)
{
term2 = 0
for (j in 1:nsp)
{
term2 = term2 + alpha[i,j]*vital$g[j]*n[t,j]
}
fec[i] = vital$lambda[i] / ( 1 + alpha[i,i]*vital$g[i]*n[t,i] + term2  )
n[t+1,i] = n[t,i] * ((1 - vital$g[i])*vital$s[i]+vital$g[i]*fec[i])
}
}
return(n)
}
z = do_simulation_annual_plant(params_vital, params_alpha_gapfill)
image(do_simulation_annual_plant(params_vital, params_alpha_gapfill))
z
tail(z)
do_simulation_annual_plant <- function(vital, alpha, nstep=200)
{
nsp = nrow(vital)
n = matrix(NA, nrow=nstep,ncol=nsp)
# set initial abundance
n[1,] = 1
for (t in 1:(nrow(n)-1))
{
fec = rep(NA, nsp)
for (i in 1:nsp)
{
term2 = 0
for (j in 1:nsp)
{
term2 = term2 + alpha[i,j]*vital$g[j]*n[t,j]
}
fec[i] = vital$lambda[i] / ( 1 + alpha[i,i]*vital$g[i]*n[t,i] + term2  )
n[t+1,i] = n[t,i] * ( (1 - vital$g[i])*vital$s[i] + vital$g[i]*fec[i] )
}
}
return(n)
}
z = do_simulation_annual_plant(params_vital, params_alpha_gapfill)
z
z
tail(z)
matplot(z)
